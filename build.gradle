plugins {
    id 'java'
    id 'jacoco'
    id "com.github.hierynomus.license" version "0.15.0"
    id "org.sonarqube" version "2.8"
}

repositories {
    maven { url 'http://4thline.org/m2' }
    jcenter()
    flatDir { dirs 'lib' }
}

version = '2.3.0-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all'
    options.encoding = 'UTF-8'
}

test {
    if(logger.infoEnabled) {
        testLogging.showStandardStreams = true
    }
    jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-enableassertions'
}

processResources {
    rename(/(\w+)_en.properties/, '$1.properties')
    rename(/(\w+)_zh_CN.properties/, '$1_zh.properties')
    filter { line -> line.replaceAll(/@VERSION_NUMBER@/, project.version) }
}

jar {
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
    manifest { attributes 'Main-Class': 'org.chris.portmapper.PortMapperStarter' }
}

dependencies {
    implementation 'args4j:args4j:2.33'
    implementation 'org.slf4j:slf4j-api:1.7.26'
    implementation 'org.slf4j:jul-to-slf4j:1.7.26'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.miglayout:miglayout-swing:5.2'
    implementation 'org.jdesktop.bsaf:bsaf:1.9.2'
    implementation ':sbbi-upnplib:1.0.4'
    implementation 'org.fourthline.cling:cling-support:2.1.2'
    implementation 'org.bitlet:weupnp:0.1.4'
    
    runtimeOnly 'commons-jxpath:commons-jxpath:1.1' // sbbi

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.27.0'
}

license {
    header = file('gradle/license-header.txt')
}
