plugins {
    id 'java'
    id "com.github.hierynomus.license" version "0.15.0"
    id "org.sonarqube" version "2.7"
}

repositories {
    maven { url 'http://4thline.org/m2' }
    jcenter()
    flatDir { dirs 'lib' }
}

version = '2.1.2'
sourceCompatibility = 11
targetCompatibility = 11

tasks.withType(JavaCompile) {
	options.compilerArgs << '-Xlint:all'
	options.encoding = 'UTF-8'
}

test {
	if(logger.infoEnabled) {
		testLogging.showStandardStreams = true
	}
	jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-enableassertions'
}

processResources {
    rename(/(\w+)_en.properties/, '$1.properties')
    rename(/(\w+)_zh_CN.properties/, '$1_zh.properties')
    filter { line -> line.replaceAll(/@VERSION_NUMBER@/, project.version) }
    filter(org.apache.tools.ant.filters.EscapeUnicode)
}

jar {
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
		configurations.runtime.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest { attributes 'Main-Class': 'org.chris.portmapper.PortMapperStarter' }
}

dependencies {
    compile 'args4j:args4j:2.33'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:jul-to-slf4j:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'com.miglayout:miglayout-swing:5.1'
    compile 'org.jdesktop.bsaf:bsaf:1.9.2'
    compile ':sbbi-upnplib:1.0.4'
    compile 'org.fourthline.cling:cling-support:2.1.1'
    compile 'org.bitlet:weupnp:0.1.4'
    
    runtime 'commons-jxpath:commons-jxpath:1.1' // sbbi

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.27.0'
}

license {
    header = file('gradle/license-header.txt')
}
